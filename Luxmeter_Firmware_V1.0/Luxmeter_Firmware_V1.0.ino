/*
Скетч 

*/



#include <TinyWireM.h>
#include <Tiny4kOLED.h>
#include <EEPROM.h>

#define BH1750_ADDR 0x23  // адреса датчика
#define EEPROM_ADDR 0

#define ADC_PIN A3
#define readDelay 30
#define delayTime2 450
#define readSamples 5
#define vcc 5.1

uint16_t lux = 0;
uint16_t prevlux = 0;

int voltagePercent = 0;

unsigned long prevTime1 = 0;
unsigned long prevTime2 = 0;

bool state = false; 

#define butPin 4      // пін кнопки
#define debounceDelay 300 // мс, час для дебаунсу

unsigned long lastButtonTime = 0; // останній час зміни стану кнопки
bool lastButtonState = LOW;      // попередній стан (HIGH для pull-up)
bool butFlag = false;

const unsigned char Logo_Bitmap [] PROGMEM = {
0xFC, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x80, 0x80, 0xE0, 0x30, 0x18, 0x08, 0x0C, 0x04, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x1C, 0x70, 0xC0, 0x70, 0x1C, 0x00, 0x00, 0x08, 0xFC, 0x00,
0x80, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x96, 0x93, 0x91,
0xD8, 0x48, 0x4C, 0x64, 0x26, 0x22, 0x33, 0x11, 0x00, 0x00,
0x00, 0xE0, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x69, 0xC9, 0x89, 0x1B, 0x12,
0x32, 0x26, 0x64, 0x44, 0xCC, 0x88, 0x00, 0x00, 0x00, 0xFF,
0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x80,
0xFE, 0xFE, 0xFE, 0x00, 0x02, 0x06, 0x0E, 0x1E, 0xFC, 0xF8,
0xF0, 0xFC, 0xBE, 0x0E, 0x06, 0x02, 0x00, 0xFE, 0xFE, 0xFE,
0xFE, 0x0E, 0x0E, 0x06, 0x0E, 0xFE, 0xFE, 0xFC, 0xFC, 0x0E,
0x06, 0x06, 0x0E, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0xF8,
0xFC, 0xFE, 0x6E, 0x66, 0x66, 0x66, 0x6E, 0x7E, 0x7C, 0x78,
0x00, 0x0E, 0x0E, 0xFF, 0xFF, 0xFF, 0x0E, 0x0E, 0x0E, 0x00,
0x00, 0xF8, 0xFC, 0xFE, 0x6E, 0x66, 0x66, 0x66, 0x6E, 0x7E,
0x7C, 0x78, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0x0E, 0x0E,
0x0E, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x1F, 0x0F, 0x07, 0x03,
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x07, 0x0C, 0x18,
0x10, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F,
0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x00, 0x00, 0x00,
0x07, 0x07, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x07, 0x0F, 0x0F,
0x0F, 0x00, 0x08, 0x0C, 0x0E, 0x0F, 0x07, 0x01, 0x01, 0x03,
0x0F, 0x0F, 0x0C, 0x08, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x00,
0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00,
0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x01, 0x07, 0x07,
0x0F, 0x0E, 0x0C, 0x0C, 0x0E, 0x0F, 0x06, 0x04, 0x00, 0x00,
0x00, 0x07, 0x0F, 0x0F, 0x0E, 0x0C, 0x0E, 0x08, 0x00, 0x01,
0x07, 0x07, 0x0F, 0x0E, 0x0C, 0x0C, 0x0E, 0x0F, 0x06, 0x04,
0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00
};

// Ініціалізація BH1750
void bh1750_init() {
  TinyWireM.beginTransmission(BH1750_ADDR);
  TinyWireM.send(0x10);  // High-res mode, 1 lx resolution
  TinyWireM.endTransmission();
}

// Читання значення освітленості
uint16_t bh1750_read() {
  uint16_t value = 0;
  TinyWireM.requestFrom(BH1750_ADDR, 2);
  if (TinyWireM.available() == 2) {
    value  = TinyWireM.receive() << 8;
    value |= TinyWireM.receive();
  }
  return value / 1.2;  // перетворення у люкси
}

float readBattery(){
  int sum = 0;
  int samplesTaken = 0;
  while (samplesTaken < readSamples) {
    if (millis() - prevTime1 >= readDelay) {
      prevTime1 = millis();                 // оновлюємо час
      sum += analogRead(ADC_PIN);          // робимо вимір
      samplesTaken++;                      // рахуємо скільки вже виміряли
    }
  }
  int avgRead = (int)sum/readSamples;

  float batLevel = (avgRead/1023.0)*vcc;

  float minV = 2.8;   // 0%
  float maxV = 4.2;   // 100%

  if (batLevel <= minV) return 0;
  if (batLevel >= maxV) return 100;

  // лінійне перетворення
  return (int)((batLevel - minV) * 100.0 / (maxV - minV));

  //return batLevel;
}

void chargeIndicate() {
  if (state && millis() - prevTime2 >= delayTime2)
  {
    prevTime2 = millis(); 
    state = false;
    oled.setCursor(103, 2);
    oled.print(F(""));
    oled.clearToEOL();
    //oled.clearToEOL();
  }

  else if (!state && millis() - prevTime2 >= delayTime2)
  {
    prevTime2 = millis(); // Попередній час = поточний час
    state = true;
    oled.setCursor(103, 2);
    oled.print(F("LOW!"));
    oled.clearToEOL();
  }
}

void buttonProcessing(){
  bool readButton = !digitalRead(butPin);

  // перевірка на зміну стану та дебаунс
  if (readButton != lastButtonState) {
    lastButtonTime = millis(); // оновлюємо час зміни
  }

  if ((millis() - lastButtonTime) > debounceDelay) {
    // кнопка стабільна
    if (readButton == HIGH && !butFlag) { // коротке натискання
      butFlag = true; 
      prevlux = lux;
      EEPROM.put(EEPROM_ADDR, prevlux);
    }
    if (readButton == LOW) {
      butFlag = false; // кнопка відпущена
    }
  }

  lastButtonState = readButton;

}

void setup() {
  TinyWireM.begin();   // запускаємо I2C

  bh1750_init();       // ініціалізуємо датчик

  pinMode(ADC_PIN, INPUT);
  pinMode(butPin, INPUT_PULLUP);

  EEPROM.get(EEPROM_ADDR, prevlux);

  oled.begin();        // запускаємо OLED
  oled.clear();
  oled.on();

  oled.bitmap(0, 0, 128, 4, Logo_Bitmap);

  delay(1000);
  oled.clear();
}

void loop() {
  lux = bh1750_read(); 

  buttonProcessing();

  oled.setFont(FONT8X16);

  oled.setCursor(0, 16);
  oled.print(F("C:"));
  oled.print(lux);
  oled.print(F("Lx"));
  oled.clearToEOL(); 

  oled.setCursor(0, 2);
  oled.print(F("P:"));
  oled.print(prevlux);
  oled.print(F("Lx"));
  //oled.clearToEOL();
  oled.print(F("    "));

  oled.setFont(FONT6X8);

  voltagePercent = readBattery();

  if (voltagePercent <= 20){
    chargeIndicate();
  }

  else if (voltagePercent >= 21){
    oled.setCursor(103, 2);
    oled.print(F("BAT:"));
    oled.clearToEOL();
  }

  oled.setCursor(103, 3);
  oled.print(voltagePercent);
  oled.print(F("%"));
  oled.clearToEOL();

}
